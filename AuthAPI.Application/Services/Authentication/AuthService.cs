using AuthAPI.Application.CQRS.Commands.RefreshToken;
using AuthAPI.Application.CQRS.Commands.User.CreateUser;
using AuthAPI.Application.CQRS.Queries.RefreshToken;
using AuthAPI.Application.CQRS.Queries.User;
using AuthAPI.Application.Dto;
using AuthAPI.Application.Interface;
using AuthAPI.Application.Mapping;
using AuthAPI.DAL.Data;
using AuthAPI.DAL.Interfaces;
using AuthAPI.Shared.Exceptions;
using AuthAPI.Shared.Helpers;
using MediatR;
using Microsoft.Extensions.Logging;

namespace AuthAPI.Application.Services.Authentication;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/// </summary>
public class AuthService(
    AuthDbContext context,
    ITokenService tokenService,
    IPasswordService passwordService,
    IAuditService auditService,
    ILoginActivityService loginActivityService,
    IMediator mediator,
    IUserRepository userRepository,
    ILogger<AuthService> logger,
    IMessagePublisher messagePublisher) : IAuthService
{
    public async Task<AuthResponse> LoginAsync(LoginRequest request, string? ipAddress, string userAgent, CancellationToken cancellationToken = default)
    {
        var ip = ipAddress ?? "Unknown";
        var deviceInfo = DeviceInfoParser.GetDeviceInfo(userAgent);
        var deviceFingerprint = DeviceHelper.GenerateDeviceFingerprint(deviceInfo);

        var user = await mediator.Send(new GetByEmailRequest(request.Email), cancellationToken);
        
        // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        var isLoginAllowed = await loginActivityService.IsLoginAllowedAsync(
            user.Id, ip, deviceFingerprint, cancellationToken);

        if (!isLoginAllowed)
        {
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            await auditService.LogLoginAsync(user.Id, ip, false, cancellationToken);

            // –ù–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –≤—Ö–æ–¥ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω,
            // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "–¥–≤–æ–π–Ω–æ–≥–æ —Å—á–µ—Ç–∞"
            throw new AccountTemporarilyLockedException();
        }

        // üîπ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        if (!PasswordValidationHelper.IsValidPassword(request.Password, logger))
            throw new ArgumentException("–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", nameof(request.Password));
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        if (!passwordService.VerifyPassword(request.Password, user.PasswordHash))
        {
            await auditService.LogLoginAsync(user.Id, ip, false, cancellationToken);
            await loginActivityService.RecordFailedLoginAsync(user.Id, ip, deviceInfo, cancellationToken);
            throw new InvalidCredentialsException();
        }
        
        // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        // var isSuspiciousLogin = await loginActivityService.IsSuspiciousLoginAsync(
        //     user.Id, ip, deviceFingerprint, cancellationToken);
        
        await using var transaction = await context.Database.BeginTransactionAsync(cancellationToken);
        try
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            await userRepository.UpdateLastTimeAsync(user, cancellationToken);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ RabbitMQ
            await messagePublisher.PublishAsync("login-notifications", user.ToNotificationMessage(ipAddress!, deviceInfo));

            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            await auditService.LogLoginAsync(user.Id, ip, true, cancellationToken);
            await loginActivityService.RecordSuccessfulLoginAsync(user.Id, ip, deviceInfo, cancellationToken);

            var response = await tokenService.GenerateAuthResponseAsync(user, cancellationToken);
            
            // –ï—Å–ª–∏ –≤—Ö–æ–¥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è 2FA
            // if (isSuspiciousLogin)
            // {
            //     response.RequiresTwoFactor = true;
            //     // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            //     // await _twoFactorService.SendVerificationCodeAsync(user.Id, user.Email, cancellationToken);
            // }
            
            await transaction.CommitAsync(cancellationToken);
            return response;
        }
        catch (Exception)
        {
            await transaction.RollbackAsync(cancellationToken);
            throw;
        }
    }
    
    public async Task<AuthResponse> RegisterAsync(CreateUserCommand userCommand, string? ipAddress, string userAgent, CancellationToken cancellationToken = default)
    {
        var ip = ipAddress ?? "Unknown";
        var deviceInfo = DeviceInfoParser.GetDeviceInfo(userAgent);

        // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Email
        await mediator.Send(new ExistingUserRequest(userCommand.Email), cancellationToken);
        
        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
        await mediator.Send(new ExistingByUsernameRequest(userCommand.Username), cancellationToken);

        await using var transaction = await context.Database.BeginTransactionAsync(cancellationToken);
        try
        {
            var user = await mediator.Send(new CreateUserCommand
            {
                Email = userCommand.Email,
                Password = userCommand.Password,
                Username = userCommand.Username,
                FirstName = userCommand.FirstName,
                LastName = userCommand.LastName,
            }, cancellationToken);

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await auditService.LogRegistrationAsync(user.Id, ip, true, cancellationToken);
            var response = await tokenService.GenerateAuthResponseAsync(user, cancellationToken);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ RabbitMQ
            await messagePublisher.PublishAsync("login-notifications", user.ToNotificationMessage(ipAddress!, deviceInfo));
            await transaction.CommitAsync(cancellationToken);

            return response;
        }
        catch
        {
            await transaction.RollbackAsync(cancellationToken);
            throw;
        }
        
    }

    public async Task LogoutAsync(LogoutRequest request, string? ipAddress, string userAgent, CancellationToken cancellationToken = default)
    {
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
        var ip = ipAddress ?? "Unknown";
        var deviceInfo = DeviceInfoParser.GetDeviceInfo(userAgent);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        var token = await mediator.Send(new GetRefreshTokenRequest(request.RefreshToken, ip), cancellationToken);

        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –≤–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await using var transaction = await context.Database.BeginTransactionAsync(cancellationToken);
        try
        {
            await mediator.Send(new RevokeTokensRequest(request, token), cancellationToken);
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –≤ –æ—á–µ—Ä–µ–¥—å
            await messagePublisher.PublishAsync("logout-notifications",
                token.User!.NotificationMessage(ipAddress!, deviceInfo));
            
            await auditService.LogLogoutAsync(token.UserId, ip, request.LogoutFromAllDevices, cancellationToken);
            await transaction.CommitAsync(cancellationToken);
        }
        catch (Exception)
        {
            await transaction.RollbackAsync(cancellationToken);
            throw;
        }
    }

}