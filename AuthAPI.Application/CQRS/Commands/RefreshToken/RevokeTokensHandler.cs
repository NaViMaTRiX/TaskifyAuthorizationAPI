using AuthAPI.Application.Dto;
using AuthAPI.DAL.Data;
using AuthAPI.DAL.Interfaces;
using MediatR;
using Microsoft.Extensions.Logging;

namespace AuthAPI.Application.CQRS.Commands.RefreshToken;

public record RevokeTokensRequest(LogoutRequest Request, Domain.Models.RefreshToken Token) : IRequest<Unit>;

public class RevokeTokensHandler(AuthDbContext context, IRefreshTokenRepository repository, ILogger<RevokeTokensHandler> logger)
    : IRequestHandler<RevokeTokensRequest, Unit>
{
    public async Task<Unit> Handle(RevokeTokensRequest request, CancellationToken cancellationToken = default)
    {
        // üîπ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (request is null)
        {
            logger.LogError("–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤: –≤—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å `RevokeTokenRequest` —Ä–∞–≤–µ–Ω `null`.");
            throw new ArgumentNullException(nameof(request), "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }
        
        var (token, logoutFromAllDevices) = (request.Token, request.Request.LogoutFromAllDevices);

        if (token is null)
        {
            logger.LogError("–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤: –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π `RefreshToken` —Ä–∞–≤–µ–Ω `null`.");
            throw new ArgumentNullException(nameof(token), "–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π refresh-—Ç–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }
        
        await using var transaction = await context.Database.BeginTransactionAsync(cancellationToken);
        try
        {
            if (logoutFromAllDevices)
            {
                var updatedTokens = await repository.RevokeTokensAsync(token, cancellationToken);
                logger.LogInformation("–û—Ç–æ–∑–≤–∞–Ω–æ {Count} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}.", updatedTokens, token.UserId);
            }

            // üîπ –û—Ç–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
            token.Revoke();

            await context.SaveChangesAsync(cancellationToken);
            await transaction.CommitAsync(cancellationToken);

            logger.LogInformation("–¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –æ—Ç–æ–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.", token.UserId);
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync(cancellationToken);
            logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}.", token?.UserId);
            throw;
        }
        return Unit.Value;
    }
}